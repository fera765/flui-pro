import { container } from '../config/container';
import { IEmotionMemory } from '../memory/interfaces/IEmotionMemory';
import { ILlmService } from '../interfaces/ILlmService';
import { EmotionVector, PolicyDelta } from '../memory/interfaces/IEmotionMemory';

/**
 * Exemplo de uso da Mem√≥ria Epis√≥dica Autoverificada com Continuidade Temporal Emocional
 * Demonstra o protocolo SRI (Strip-Recall-Inject) em a√ß√£o
 */
export class EmotionMemoryExample {
  private emotionMemory: IEmotionMemory;
  private llmService: ILlmService;

  constructor() {
    this.emotionMemory = container.get<IEmotionMemory>('IEmotionMemory');
    this.llmService = container.get<ILlmService>('ILlmService');
  }

  /**
   * Exemplo 1: Demonstra√ß√£o do protocolo SRI
   */
  async demonstrateSRIProtocol(): Promise<void> {
    console.log('üß† Demonstrando Protocolo SRI (Strip-Recall-Inject)');
    
    const originalContext = `
User: Fa√ßa um relat√≥rio de investimento sobre NEWcoin
Assistant: Vou analisar NEWcoin para voc√™...

User: Quais s√£o os riscos?
Assistant: Os principais riscos incluem volatilidade...

User: E as oportunidades?
Assistant: As oportunidades incluem crescimento...

User: Qual sua recomenda√ß√£o final?
Assistant: Baseado na an√°lise, recomendo cautela...
    `.trim();

    console.log(`üìä Contexto original: ${this.estimateTokens(originalContext)} tokens`);
    
    // Execute SRI Protocol
    const sriResult = await this.emotionMemory.executeSRIProtocol(originalContext, 0.7, 2);
    
    console.log(`üìâ Contexto processado: ${this.estimateTokens(sriResult.processedContext)} tokens`);
    console.log(`üéØ Redu√ß√£o de tokens: ${sriResult.tokenReduction.toFixed(1)}%`);
    console.log(`üíæ Mem√≥rias injetadas: ${sriResult.memoriesInjected}`);
    
    console.log('\nüìù Contexto processado:');
    console.log(sriResult.processedContext);
  }

  /**
   * Exemplo 2: Cria√ß√£o e armazenamento de mem√≥ria emocional
   */
  async demonstrateEmotionalMemoryStorage(): Promise<void> {
    console.log('\nüß† Demonstrando Armazenamento de Mem√≥ria Emocional');
    
    // Simular an√°lise emocional de uma resposta sobre altcoin
    const emotionVector: EmotionVector = {
      valence: 0.8,        // Positivo (recomenda√ß√£o cautelosa)
      arousal: 0.9,        // Alto (an√°lise detalhada)
      dominance: 0.7,      // Alto (confian√ßa na an√°lise)
      confidence: 0.8,     // Alto (an√°lise fundamentada)
      regret: 0.6,         // M√©dio (preocupa√ß√£o com riscos)
      satisfaction: 0.7    // Alto (an√°lise completa)
    };

    const policyDelta: PolicyDelta = {
      action: 'add_disclaimer',
      context: 'altcoin_analysis',
      intensity: 0.8,
      timestamp: Date.now()
    };

    const context = 'An√°lise de investimento em NEWcoin - usu√°rio pediu recomenda√ß√£o';
    const outcome = true; // An√°lise bem-sucedida

    // Armazenar mem√≥ria
    const emotionHash = await this.emotionMemory.storeMemory(
      emotionVector,
      policyDelta,
      context,
      outcome
    );

    console.log(`üíæ Mem√≥ria armazenada com hash: ${emotionHash}`);
    
    // Recuperar mem√≥ria
    const recalled = await this.emotionMemory.recallDelta(emotionHash);
    console.log(`üîÑ Mem√≥ria recuperada: ${recalled}`);
  }

  /**
   * Exemplo 3: Uso com LLM real
   */
  async demonstrateLLMIntegration(): Promise<void> {
    console.log('\nü§ñ Demonstrando Integra√ß√£o com LLM');
    
    try {
      const prompt = 'Fa√ßa uma an√°lise de investimento sobre uma nova criptomoeda chamada TESTcoin';
      
      console.log(`üìù Prompt: ${prompt}`);
      
      // O EnhancedLlmService automaticamente aplica o protocolo SRI
      const response = await this.llmService.generateResponse(prompt);
      
      console.log(`ü§ñ Resposta da LLM: ${response.substring(0, 200)}...`);
      
      // Verificar estat√≠sticas de mem√≥ria
      const stats = await this.emotionMemory.getMemoryStats();
      console.log(`üìä Estat√≠sticas de mem√≥ria:`, stats);
      
    } catch (error) {
      console.log(`‚ùå Erro na integra√ß√£o com LLM: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Exemplo 4: An√°lise emocional de texto
   */
  async demonstrateEmotionalAnalysis(): Promise<void> {
    console.log('\nüòä Demonstrando An√°lise Emocional de Texto');
    
    const texts = [
      'Estou muito feliz com este excelente resultado!',
      'Lamento muito este erro terr√≠vel que cometi.',
      'Talvez isso possa funcionar, mas n√£o tenho certeza.',
      'Estou confiante de que esta solu√ß√£o √© definitivamente a melhor.'
    ];

    for (const text of texts) {
      const emotionVector = await this.emotionMemory.analyzeEmotionalContext(text);
      
      console.log(`üìù Texto: "${text}"`);
      console.log(`üòä An√°lise emocional:`, {
        valence: emotionVector.valence.toFixed(2),
        arousal: emotionVector.arousal.toFixed(2),
        confidence: emotionVector.confidence.toFixed(2),
        regret: emotionVector.regret.toFixed(2)
      });
      console.log('');
    }
  }

  /**
   * Exemplo 5: Demonstra√ß√£o completa do sistema
   */
  async runCompleteDemo(): Promise<void> {
    console.log('üöÄ INICIANDO DEMONSTRA√á√ÉO COMPLETA DA MEM√ìRIA EMOCIONAL FLUI');
    console.log('=' .repeat(70));
    
    await this.demonstrateSRIProtocol();
    await this.demonstrateEmotionalMemoryStorage();
    await this.demonstrateEmotionalAnalysis();
    await this.demonstrateLLMIntegration();
    
    console.log('\n‚úÖ DEMONSTRA√á√ÉO COMPLETA FINALIZADA!');
    console.log('=' .repeat(70));
  }

  private estimateTokens(text: string): number {
    // Estimativa simples: 1 token ‚âà 4 caracteres
    return Math.ceil(text.length / 4);
  }
}