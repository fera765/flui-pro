import { Task, TaskResult, OrchestratorConfig } from '../types';
import { FluiContext } from '../types/advanced';
import { Classifier } from './classifier';
import { Planner } from './planner';
import { Worker } from './worker';
import { Supervisor } from './supervisor';
import { EmotionMemoryConfig } from '../types/emotionMemory';
export declare class AdvancedOrchestrator {
    private config;
    private classifier;
    private planner;
    private worker;
    private supervisor;
    private tasks;
    private events;
    private agents;
    private tools;
    private contextManager;
    private todoPlanner;
    private autoCorrection;
    private fileGenerator;
    private pluginLoader;
    private timeoutManager;
    private concurrentTaskManager;
    private sriProtocol;
    constructor(config: OrchestratorConfig, classifier: Classifier, planner: Planner, worker: Worker, supervisor: Supervisor, emotionMemoryConfig?: EmotionMemoryConfig);
    private initializeAgents;
    private initializePlugins;
    private setupConcurrentTaskListeners;
    createTask(prompt: string): Promise<Task>;
    private createNewTask;
    private getCurrentActiveTaskId;
    private createSimpleTask;
    private createComplexTask;
    executeTask(taskId: string): Promise<TaskResult>;
    private executeComplexTask;
    private executeTodo;
    private executeAgentTodo;
    private executeToolTodo;
    private generateFinalDeliverables;
    private handleSimpleTaskResult;
    private handleComplexTaskResult;
    private updateTaskStatus;
    private emitEvent;
    getTask(taskId: string): Task | undefined;
    getAllTasks(): Task[];
    getTaskEvents(taskId: string): any[];
    getContext(taskId: string): FluiContext | undefined;
    private buildContextMessages;
    getEmotionMemoryStats(): Promise<any>;
    clearEmotionMemories(): Promise<void>;
    optimizeContextForAgent(agentId: string, context: string, taskId: string): Promise<any>;
    getPerformanceMetrics(): Promise<any>;
    getAlerts(): Promise<any[]>;
    getAgentMetrics(agentId: string): Promise<any[]>;
    getMemoriesByDomain(domain: string): Promise<any[]>;
    getMemoriesByAgent(agentId: string): Promise<any[]>;
    getMostEffectiveMemories(limit?: number): Promise<any[]>;
    getTuningRecommendations(): Promise<any[]>;
    applyTuningRecommendations(recommendations: any[]): Promise<any>;
}
//# sourceMappingURL=advancedOrchestrator.d.ts.map