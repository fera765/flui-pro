import OpenAI from 'openai';
import * as fs from 'fs/promises';
import * as path from 'path';
import { FluiContext } from '../types/advanced';

export class FileGenerator {
  private openai: OpenAI;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || '',
      baseURL: process.env.OPENAI_BASE_URL || 'http://localhost:4000',
      dangerouslyAllowBrowser: true
    });
  }

  async generateFolderName(context: FluiContext): Promise<string> {
    try {
      const response = await this.openai.chat.completions.create({
        model: 'openai',
        messages: [
          {
            role: 'system',
            content: `Generate a descriptive, professional folder name for a project based on the main task. 
            The name should be:
            - Descriptive and clear
            - Use kebab-case (lowercase with hyphens)
            - Maximum 50 characters
            - No special characters except hyphens
            - Professional and project-appropriate
            
            Main task: ${context.mainTask}
            Context: ${context.globalContext}`
          },
          {
            role: 'user',
            content: 'Generate a folder name for this project'
          }
        ],
        temperature: 0.7,
        max_tokens: 50
      });

      const folderName = response.choices[0]?.message?.content?.trim() || 'flui-project';
      return this.sanitizeFolderName(folderName);
    } catch (error) {
      return 'flui-project';
    }
  }

  async generateFileName(content: string, extension: string, context: FluiContext): Promise<string> {
    try {
      const response = await this.openai.chat.completions.create({
        model: 'openai',
        messages: [
          {
            role: 'system',
            content: `Generate a descriptive, professional file name for content. 
            The name should be:
            - Descriptive and clear
            - Use kebab-case (lowercase with hyphens)
            - Maximum 40 characters
            - No special characters except hyphens
            - Professional and content-appropriate
            - Include the appropriate extension: .${extension}
            
            Content preview: ${content.substring(0, 200)}...
            Project context: ${context.mainTask}`
          },
          {
            role: 'user',
            content: `Generate a file name for this ${extension} content`
          }
        ],
        temperature: 0.7,
        max_tokens: 50
      });

      const fileName = response.choices[0]?.message?.content?.trim() || `generated-file.${extension}`;
      return this.sanitizeFileName(fileName, extension);
    } catch (error) {
      return `generated-file.${extension}`;
    }
  }

  private sanitizeFolderName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
      .substring(0, 50);
  }

  private sanitizeFileName(name: string, extension: string): string {
    const baseName = name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
      .substring(0, 40);

    // Ensure extension is correct
    const finalName = baseName.endsWith(`.${extension}`) ? baseName : `${baseName}.${extension}`;
    return finalName;
  }

  async createProjectStructure(context: FluiContext): Promise<string> {
    const folderName = await this.generateFolderName(context);
    const projectPath = path.join(context.workingDirectory, folderName);
    
    try {
      await fs.mkdir(projectPath, { recursive: true });
      
      // Create subdirectories
      await fs.mkdir(path.join(projectPath, 'assets'), { recursive: true });
      await fs.mkdir(path.join(projectPath, 'docs'), { recursive: true });
      await fs.mkdir(path.join(projectPath, 'output'), { recursive: true });
      
      // Create README
      const readmeContent = this.generateReadmeContent(context);
      await fs.writeFile(
        path.join(projectPath, 'README.md'),
        readmeContent,
        'utf-8'
      );
      
      // Update context
      context.workingDirectory = projectPath;
      context.generatedFiles.push('README.md');
      
      return projectPath;
    } catch (error) {
      throw new Error(`Failed to create project structure: ${error}`);
    }
  }

  private generateReadmeContent(context: FluiContext): string {
    return `# ${context.mainTask}

## Project Overview
This project was generated by Flui AI Orchestrator.

## Main Task
${context.mainTask}

## Generated Files
${context.generatedFiles.map(file => `- ${file}`).join('\n')}

## Context
${context.globalContext}

## Generated on
${new Date().toISOString()}

---
*Generated by Flui AI Orchestrator*
`;
  }

  async saveContentToFile(
    content: string,
    extension: string,
    context: FluiContext,
    subdirectory?: string
  ): Promise<string> {
    const fileName = await this.generateFileName(content, extension, context);
    const targetDir = subdirectory ? 
      path.join(context.workingDirectory, subdirectory) : 
      context.workingDirectory;
    
    // Ensure directory exists
    await fs.mkdir(targetDir, { recursive: true });
    
    const filePath = path.join(targetDir, fileName);
    await fs.writeFile(filePath, content, 'utf-8');
    
    // Update context
    const relativePath = path.relative(context.workingDirectory, filePath);
    context.generatedFiles.push(relativePath);
    
    return filePath;
  }

  async saveMultipleFiles(
    files: Array<{ content: string; extension: string; subdirectory?: string }>,
    context: FluiContext
  ): Promise<string[]> {
    const savedFiles: string[] = [];
    
    for (const file of files) {
      const filePath = await this.saveContentToFile(
        file.content,
        file.extension,
        context,
        file.subdirectory
      );
      savedFiles.push(filePath);
    }
    
    return savedFiles;
  }

  async createProjectSummary(context: FluiContext): Promise<string> {
    const summaryPath = path.join(context.workingDirectory, 'PROJECT_SUMMARY.md');
    
    const summaryContent = `# Project Summary

## Main Task
${context.mainTask}

## Completion Status
- Total Tasks: ${context.todos.length}
- Completed: ${context.completedTasks.length}
- Progress: ${((context.completedTasks.length / context.todos.length) * 100).toFixed(1)}%

## Generated Files
${context.generatedFiles.map(file => `- ${file}`).join('\n')}

## Global Context
${context.globalContext}

## Collected Data
${Object.keys(context.collectedData).length} data points collected:
${Object.keys(context.collectedData).map(key => `- ${key}`).join('\n')}

## Task Timeline
${context.completedTasks.map(task => 
  `- ${task.description} (${task.completedAt?.toISOString()})`
).join('\n')}

---
*Generated by Flui AI Orchestrator on ${new Date().toISOString()}*
`;

    await fs.writeFile(summaryPath, summaryContent, 'utf-8');
    context.generatedFiles.push('PROJECT_SUMMARY.md');
    
    return summaryPath;
  }
}